; Script generated by the HM NIS Edit Script Wizard.

; HM NIS Edit Wizard helper defines
!define PRODUCT_NAME "chrome自动升级助手"
!define PRODUCT_VERSION "1.2017.07.25"
!define PRODUCT_PUBLISHER "@你的档案"
!define PRODUCT_WEB_SITE "https://github.com/chenjia404/ChromeAutoUpdate/"
!define PRODUCT_DIR_REGKEY "Software\ChromeAutoUpdate\${PRODUCT_NAME}\"
!define PRODUCT_UNINST_KEY "Software\ChromeAutoUpdate\Uninstall\${PRODUCT_NAME}\"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"
!define PRODUCT_STARTMENU_REGVAL "NSIS:StartMenuDir"

; MUI 1.67 compatible ------
!include "MUI.nsh"

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "Chrome_64px.ico"
!define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico"

; Welcome page
!insertmacro MUI_PAGE_WELCOME
; License page
!define MUI_LICENSEPAGE_RADIOBUTTONS
!insertmacro MUI_PAGE_LICENSE "LICENSE"
; Directory page
!insertmacro MUI_PAGE_DIRECTORY
; Start menu page
var ICONS_GROUP
!define MUI_STARTMENUPAGE_NODISABLE
!define MUI_STARTMENUPAGE_DEFAULTFOLDER "chrome自动升级助手"
!define MUI_STARTMENUPAGE_REGISTRY_ROOT "${PRODUCT_UNINST_ROOT_KEY}"
!define MUI_STARTMENUPAGE_REGISTRY_KEY "${PRODUCT_UNINST_KEY}"
!define MUI_STARTMENUPAGE_REGISTRY_VALUENAME "${PRODUCT_STARTMENU_REGVAL}"
!insertmacro MUI_PAGE_STARTMENU Application $ICONS_GROUP
; Instfiles page
!insertmacro MUI_PAGE_INSTFILES
; Finish page
!define MUI_FINISHPAGE_RUN "$INSTDIR\ChromeAutoUpdate.exe"
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "SimpChinese"

; MUI end ------

Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
OutFile "ChromeAutoUpdate${PRODUCT_VERSION}.exe"
InstallDir "d:\soft\ChromeAutoUpdate"
InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show
ShowUnInstDetails show

Section -.NET
  Call CheckAndDownloadDotNet45

SectionEnd

Section "MainSection" SEC01
  SetOutPath "$INSTDIR"
  SetOverwrite ifnewer
  File "ChromeAutoUpdate\bin\Release\ChromeAutoUpdate.exe"
  File "ChromeAutoUpdate\bin\Release\7zr.exe"

;Shortcuts
  !insertmacro MUI_STARTMENU_WRITE_BEGIN Application
  CreateDirectory "$SMPROGRAMS\$ICONS_GROUP"
  CreateShortCut "$SMPROGRAMS\$ICONS_GROUP\chrome自动升级助手.lnk" "$INSTDIR\ChromeAutoUpdate.exe"
  CreateShortCut "$DESKTOP\chrome自动升级助手.lnk" "$INSTDIR\ChromeAutoUpdate.exe"
  !insertmacro MUI_STARTMENU_WRITE_END
SectionEnd

Section -AdditionalIcons
  !insertmacro MUI_STARTMENU_WRITE_BEGIN Application
  WriteIniStr "$INSTDIR\${PRODUCT_NAME}.url" "InternetShortcut" "URL" "${PRODUCT_WEB_SITE}"
  CreateShortCut "$SMPROGRAMS\$ICONS_GROUP\官网.lnk" "$INSTDIR\${PRODUCT_NAME}.url"
  CreateShortCut "$SMPROGRAMS\$ICONS_GROUP\Uninstall.lnk" "$INSTDIR\uninst.exe"
  !insertmacro MUI_STARTMENU_WRITE_END
SectionEnd

Section -Post
  WriteUninstaller "$INSTDIR\uninst.exe"
  WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "" "$INSTDIR\ChromeAutoUpdate.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\ChromeAutoUpdate.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
SectionEnd

Function CheckAndDownloadDotNet45
# Let's see if the user has the .NET Framework 4.5 installed on their system or not
# Remember: you need Vista SP2 or 7 SP1.  It is built in to Windows 8, and not needed
# In case you're wondering, running this code on Windows 8 will correctly return is_equal
# or is_greater (maybe Microsoft releases .NET 4.5 SP1 for example)

# Set up our Variables
Var /GLOBAL dotNET45IsThere
Var /GLOBAL dotNET_CMD_LINE
Var /GLOBAL EXIT_CODE

ReadRegDWORD $dotNET45IsThere HKLM "SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full" "Release"
IntCmp $dotNET45IsThere 378389 is_equal is_less is_greater

is_equal:
	Goto done_compare_not_needed
is_greater:
	# Useful if, for example, Microsoft releases .NET 4.5 SP1
	# We want to be able to simply skip install since it's not
	# needed on this system
	Goto done_compare_not_needed
is_less:
	Goto done_compare_needed

done_compare_needed:
	#.NET Framework 4.5 install is *NEEDED*

	# Microsoft Download Center EXE:
	# Web Bootstrapper: http://go.microsoft.com/fwlink/?LinkId=225704
	# Full Download: http://go.microsoft.com/fwlink/?LinkId=225702

	# Setup looks for components\dotNET45Full.exe relative to the install EXE location
	# This allows the installer to be placed on a USB stick (for computers without internet connections)
	# If the .NET Framework 4.5 installer is *NOT* found, Setup will connect to Microsoft's website
	# and download it for you

	# Reboot Required with these Exit Codes:
	# 1641 or 3010

	# Command Line Switches:
	# /showrmui /passive /norestart

	# Silent Command Line Switches:
	# /q /norestart


	# Let's see if the user is doing a Silent install or not
	IfSilent is_quiet is_not_quiet

	is_quiet:
		StrCpy $dotNET_CMD_LINE "/q /norestart"
		Goto LookForLocalFile
	is_not_quiet:
		StrCpy $dotNET_CMD_LINE "/showrmui /passive /norestart"
		Goto LookForLocalFile

	LookForLocalFile:
		# Let's see if the user stored the Full Installer
		IfFileExists "$EXEPATH\components\dotNET45Full.exe" do_local_install do_network_install

		do_local_install:
			# .NET Framework found on the local disk.  Use this copy

			ExecWait '"$EXEPATH\components\dotNET45Full.exe" $dotNET_CMD_LINE' $EXIT_CODE
			Goto is_reboot_requested

		# Now, let's Download the .NET
		do_network_install:

			Var /GLOBAL dotNetDidDownload
			NSISdl::download "http://go.microsoft.com/fwlink/?LinkId=225704" "$TEMP\dotNET45Web.exe" $dotNetDidDownload

			StrCmp $dotNetDidDownload success fail
			success:
				ExecWait '"$TEMP\dotNET45Web.exe" $dotNET_CMD_LINE' $EXIT_CODE
				Goto is_reboot_requested

			fail:
				MessageBox MB_OK|MB_ICONEXCLAMATION "Unable to download .NET Framework.  ${PRODUCT_NAME} will be installed, but will not function without the Framework!"
				Goto done_dotNET_function

			# $EXIT_CODE contains the return codes.  1641 and 3010 means a Reboot has been requested
			is_reboot_requested:
				${If} $EXIT_CODE = 1641
				${OrIf} $EXIT_CODE = 3010
					SetRebootFlag true
				${EndIf}

done_compare_not_needed:
	# Done dotNET Install
	Goto done_dotNET_function

#exit the function
done_dotNET_function:

FunctionEnd

Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) 已成功地从你的计算机移除。"
FunctionEnd

Function un.onInit
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "你确实要完全移除 $(^Name) ，其及所有的组件？" IDYES +2
  Abort
FunctionEnd

Section Uninstall
  !insertmacro MUI_STARTMENU_GETFOLDER "Application" $ICONS_GROUP
  Delete "$INSTDIR\${PRODUCT_NAME}.url"
  Delete "$INSTDIR\uninst.exe"
  Delete "$INSTDIR\7zr.exe"
  Delete "$INSTDIR\ChromeAutoUpdate.exe"

  Delete "$SMPROGRAMS\$ICONS_GROUP\Uninstall.lnk"
  Delete "$SMPROGRAMS\$ICONS_GROUP\Website.lnk"
  Delete "$DESKTOP\chrome自动升级助手.lnk"
  Delete "$SMPROGRAMS\$ICONS_GROUP\chrome自动升级助手.lnk"

  RMDir "$SMPROGRAMS\$ICONS_GROUP"
  RMDir "$INSTDIR"

  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  DeleteRegKey HKLM "${PRODUCT_DIR_REGKEY}"
  SetAutoClose true
SectionEnd